---
- name: Installing basic firmware and libraries for the proxy server!
  hosts: all

  tasks:
    - name: "Update the repositories and upgrade them (apt-get update + apt-get upgrade)"
      shell: sudo apt-get update && sudo apt-get upgrade -y

    - name: "Install git to clone the repositories"
      become: yes
      apt:
        name: git
        state: present

    - name: "Clone the AWX APM repository"
      git:
        repo: https://github.com/fankp1/AWX_APM.git
        dest: /home/pi/APM_AWX
        clone: yes
        
    - name: "Install the Mosquitto MQTT broker"
      become: yes
      apt:
        name: mosquitto
        state: present

    - name: "Move the MQTT broker config file"
      become: yes
      shell: sudo cp /home/pi/APM_AWX/siot-plugin.conf /etc/mosquitto/conf.d/

    - name: "Start the Mosquitto MQTT broker"
      become: yes
      shell: sudo systemctl enable mosquitto.service

    - name: "Enable the mosquitto broker service so that it automatically starts after a restart"
      become: yes
      shell: sudo systemctl start mosquitto.service

    - name: "Install NodeJS"
      become: yes
      apt:
        name: nodejs
        state: present

    - name: "Install NPM"
      become: yes
      apt:
        name: npm
        state: present 

    - name: "Install n with npm"
      become: yes
      shell: npm install -g n   
      
    - name: "Install the newest version of Node"
      become: yes
      shell: n latest
      
    - name: "Install Node-RED"
      shell: "bash /home/pi/APM_AWX/node-red.sh --confirm-install --confirm-pi"
      ignore_errors: true
      
    - name: "Start the Node-RED service"
      become: yes
      shell: sudo systemctl start nodered.service

    - name: "Enable the Node-RED service so that it automatically starts after a restart"
      become: yes
      shell: sudo systemctl enable nodered.service
        
    - name: "Installing the Node-RED extension of Kunbus"
      shell: npm install node-red-contrib-revpi-nodes

    - name: "Getting the keys of InfluxDB"
      shell: curl https://repos.influxdata.com/influxdata-archive.key | gpg --dearmor | sudo tee /usr/share/keyrings/influxdb-archive-keyring.gpg >/dev/null

    - name: "Adding the InfluxDB repository to the sources list"
      shell: echo "deb [signed-by=/usr/share/keyrings/influxdb-archive-keyring.gpg] https://repos.influxdata.com/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/influxdb.list

    - name: "Update the repositories before installing InfluxDB"
      shell: sudo apt-get update

    - name: "Install the InfluxDB TSDB"
      shell: sudo apt install influxdb

    - name: "Unmask the InfluxDB service"
      shell: sudo systemctl unmask influxdb

    - name: "Enable the InfluxDB service so that it automatically starts after a restart"
      shell: sudo systemctl enable influxdb

    - name: "Start the InfluxDB service"
      shell: sudo systemctl start influxdb

    - name: "Update the repositories before installing Grafana"
      shell: sudo apt-get update

    - name: "Getting the keys of Grafana"
      shell: curl https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/grafana-archive-keyrings.gpg >/dev/null

    - name: "Adding the Grafana repository to the sources list"
      shell: echo "deb [signed-by=/usr/share/keyrings/grafana-archive-keyrings.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list

    - name: "Update the repositories before installing Grafana"
      shell: sudo apt-get update

    - name: "Install Grafana"
      shell: sudo apt install grafana

    - name: "Enable the Grafana service so that it automatically starts after a restart"
      shell: sudo systemctl enable grafana-server

    - name: "Start the Grafana service"
      shell: sudo systemctl start grafana-server

    - name: "Get the service facts to check which services are running and enabled"
      ansible.builtin.service_facts:

    - name: "Check the status of the Mosquitto MQTT service"
      ansible.builtin.debug:
        var: ansible_facts.services["mosquitto.service"]

    - name: "Check the status of the Influx service"
      ansible.builtin.debug:
        var: ansible_facts.services["influxdb.service"]

    - name: "Check the status of the Grafana service"
      ansible.builtin.debug:
        var: ansible_facts.services["grafana-server.service"]

    - name: "Check the status of the NodeRED service"
      ansible.builtin.debug:
        var: ansible_facts.services["nodered.service"]

    - name: "Update the repositories before installing Docker"
      shell: sudo apt-get update && sudo apt-get upgrade -y

    - name: "Getting the packages and installing the Docker engine"
      shell: curl -sSL https://get.docker.com | sh

    - name: "Change the user mode so Docker can be used without sudo"
      shell: sudo usermod -aG docker pi

    - name: "Download the Docker-Compose repository"
      shell: sudo curl -L https://github.com/docker/compose/releases/download/v2.19.1/docker-compose-linux-aarch64 -o /usr/local/bin/docker-compose

    - name: "Change the user mode so that Docker-Compose can be used without sudo"
      shell: sudo chmod +x /usr/local/bin/docker-compose

    - name: "Download the isgrootx1 root certificates"
      shell: curl -o isrgrootx1.pem https://letsencrypt.org/certs/isrgrootx1.pem

    - name: "Copy the certificates to the desired folder"
      become: yes
      shell: sudo cp isrgrootx1.pem /usr/local/share/ca-certificates/

    - name: "Update the certificates"
      become: yes
      shell: sudo update-ca-certificates

    - name: "Create a new directory for SIOT"
      become: yes
      file:
        path: /opt/siot/
        state: directory

    - name: "Create a new directory for the SIOT-Tokens"
      become: yes
      file:
        path: /opt/siot/tokens/
        state: directory



    - name: "Move the Proxy Deploy Token"
      become: yes
      shell: sudo cp /home/pi/APM_AWX/.proxy-deploy-token /opt/siot/tokens/

    - name: "Move the S2 Plugin MQTT Proxy Deploy Token"
      become: yes
      shell: sudo cp /home/pi/APM_AWX/.s2-plugin-mqtt-proxy-deploy-token /opt/siot/tokens/

    - name: "Clone the Plugin Spawner repository"
      become: yes
      git:
        repo: https://proxy-deploy-token:5UsQV9y2XjJyJkm_WP9u@repo.appmodule.net/siot/s2-plugin-spawner.git
        dest: /opt/siot/plugin-spawner
        version: master
        single_branch: yes
        depth: 1

    - name: "Check out the relevant files"
      become: yes
      command: git checkout master -- docker-compose.yml compose-files
      args:
        chdir: /opt/siot/plugin-spawner

    - name: "Create a new directory for the Plugin-Spawner"
      become: yes
      file:
        path: /opt/siot/plugin-spawner/
        state: directory

    - name: "Create a new directory for the SIOT-Plugins"
      become: yes
      file:
        path: /opt/siot/plugin-spawner/plugins/
        state: directory

    - name: "Create a new directory for the Postgres database"
      become: yes
      file:
        path: /opt/siot/plugin-spawner/postgres-data/
        state: directory

    - name: "Create a new directory for the SQLite data"
      become: yes
      file:
        path: /opt/siot/plugin-spawner/sqlite-data/
        state: directory

    - name: "Move the env file to the desired folder"
      become: yes
      shell: sudo cp /home/pi/APM_AWX/.env /opt/siot/plugin-spawner/.env 

    - name: "Clone the repository for the MQTT-Plugin"
      become: yes
      git:
        repo: git clone https://proxy-deploy-token:pB_sSPW3xecHy-c1f5c5@repo.appmodule.net/siot/s2-plugin-mqtt.git
        dest: /opt/siot/plugin-spawner/plugins

    - name: "Move the bash script to the desired folder"
      become: yes
      shell: sudo cp /home/pi/APM_AWX/deploy-siot-spawner.sh /opt/siot/deploy-siot-spawner.sh

    - name: "Add the execution permission to the bash script"
      become: yes
      shell: sudo chmod +x /opt/siot/deploy-siot-spawner.sh

    - name: "Execute the deploy bash script (SIOT Spawner)"
      shell: "bash /opt/siot/deploy-siot-spawner.sh"





      



  

