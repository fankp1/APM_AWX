---
- name: Installing basic firmware and libraries for the proxy server!
  hosts: all

  tasks:
    - name: "Update the repositories and upgrade them (apt-get update + apt-get upgrade)"
      shell: sudo apt-get update && sudo apt-get upgrade -y

    - name: "Clone the AWX APM repository"
      git:
        repo: https://github.com/fankp1/AWX_APM.git
        dest: /home/pi/APM_AWX
        clone: yes
        
    - name: "Install the Mosquitto MQTT broker"
      become: yes
      apt:
        name: mosquitto
        state: present

    - name: "Start the Mosquitto MQTT broker"
      become: yes
      shell: sudo systemctl enable mosquitto.service

    - name: "Enable the mosquitto broker service so that it automatically starts after a restart"
      become: yes
      shell: sudo systemctl start mosquitto.service

    - name: "Install NodeJS"
      become: yes
      apt:
        name: nodejs
        state: present

    - name: "Install NPM"
      become: yes
      apt:
        name: npm
        state: present 

    - name: "Install n with npm"
      become: yes
      shell: npm install -g n   
      
    - name: "Install the newest version of Node"
      become: yes
      shell: n latest
      
    - name: "Install Node-RED"
      shell: "bash /home/pi/APM_AWX/node-red.sh --confirm-install --confirm-pi"
      ignore_errors: true
      
    - name: "Start the Node-RED service"
      become: yes
      shell: sudo systemctl start nodered.service

    - name: "Enable the Node-RED service so that it automatically starts after a restart"
      become: yes
      shell: sudo systemctl enable nodered.service
        
    - name: "Installing the Node-RED extension of Kunbus"
      shell: npm install node-red-contrib-revpi-nodes

    - name: "Getting the keys of InfluxDB"
      shell: curl https://repos.influxdata.com/influxdata-archive.key | gpg --dearmor | sudo tee /usr/share/keyrings/influxdb-archive-keyring.gpg >/dev/null

    - name: "Adding the InfluxDB repository to the sources list"
      shell: echo "deb [signed-by=/usr/share/keyrings/influxdb-archive-keyring.gpg] https://repos.influxdata.com/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/influxdb.list

    - name: "Update the repositories before installing InfluxDB"
      shell: sudo apt-get update

    - name: "Install the InfluxDB TSDB"
      shell: sudo apt install influxdb

    - name: "Unmask the InfluxDB service"
      shell: sudo systemctl unmask influxdb

    - name: "Enable the InfluxDB service so that it automatically starts after a restart"
      shell: sudo systemctl enable influxdb

    - name: "Start the InfluxDB service"
      shell: sudo systemctl start influxdb

    - name: "Update the repositories before installing Grafana"
      shell: sudo apt-get update && sudo apt-get upgrade -y

    - name: "Getting the keys of Grafana"
      shell: curl https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/grafana-archive-keyrings.gpg >/dev/null

    - name: "Adding the Grafana repository to the sources list"
      shell: echo "deb [signed-by=/usr/share/keyrings/grafana-archive-keyrings.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list

    - name: "Update the repositories before installing Grafana"
      shell: sudo apt-get update

    - name: "Install Grafana"
      shell: sudo apt install grafana

    - name: "Enable the Grafana service so that it automatically starts after a restart"
      shell: sudo systemctl enable grafana-server

    - name: "Start the Grafana service"
      shell: sudo systemctl start grafana-server



    - name: "Get the service facts to check which services are running and enabled"
      ansible.builtin.service_facts:

    - name: "Check the status of the Mosquitto MQTT service"
      ansible.builtin.debug:
        var: ansible_facts.services["mosquitto.service"]

    - name: "Check the status of the Influx service"
      ansible.builtin.debug:
        var: ansible_facts.services["influxd.service"]

    - name: "Check the status of the Grafana service"
      ansible.builtin.debug:
        var: ansible_facts.services["grafana-server.service"]

    - name: "Check the status of the NodeRED service"
      ansible.builtin.debug:
        var: ansible_facts.services["nodered.service"]








      



  

